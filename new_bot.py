import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatAction, ParseMode
from main import ProductCardAnalyzer, TrendAnalyzer
from niche_analyzer import NicheAnalyzer
from subscription_manager import SubscriptionManager
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
import os
import json
import sqlite3
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = "6458024697:AAHAPSC6KvZaaAgtmkCy08Id0Pq3o87IG-A"  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 1659228199  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≤ Telegram
SERPER_API_KEY = "8ba851ed7ae1e6a655102bea15d73fdb39cdac79"  # –∫–ª—é—á –¥–ª—è serper.dev API

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
product_analyzer = ProductCardAnalyzer()
trend_analyzer = TrendAnalyzer()
niche_analyzer = NicheAnalyzer()
subscription_manager = SubscriptionManager()

# –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
COSTS = {
    'product_analysis': 10,  # —Ä—É–±–ª–µ–π
    'trend_analysis': 15,
    'niche_analysis': 20,
    'tracking': 5,
    'global_search': 10  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
}

# –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTION_COSTS = {
    'basic': 1000,
    'pro': 2500,
    'business': 5000
}

# –õ–∏–º–∏—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTION_LIMITS = {
    'basic': {
        'product_analysis': 10,
        'niche_analysis': 5,
        'tracking_items': 10,
        'global_search': 20
    },
    'pro': {
        'product_analysis': 50,
        'niche_analysis': 20,
        'tracking_items': 50,
        'global_search': 100
    },
    'business': {
        'product_analysis': float('inf'),
        'niche_analysis': float('inf'),
        'tracking_items': 200,
        'global_search': float('inf')
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_niche = State()
    waiting_for_tracking = State()
    waiting_for_payment_amount = State()
    waiting_for_payment_screenshot = State()
    waiting_for_search = State()
    viewing_search_results = State()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = (
    "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WHITESAMURAI!*\n\n"
    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –Ω–∏—à–∏ –Ω–∞ Wildberries.\n"
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
    "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
    "/profile - –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_kb():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞", callback_data="product_analysis"),
            InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏", callback_data="niche_analysis")
        ],
        [
            InlineKeyboardButton(text="üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="product_search"),
            InlineKeyboardButton(text="üì± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data="track_item")
        ],
        [
            InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"),
            InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_funds")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ])
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥"
def back_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text(
        WELCOME_MESSAGE,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=main_menu_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.callback_query(lambda c: c.data == "help")
async def help_callback(callback_query: types.CallbackQuery):
    help_text = (
        "üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "*1. –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞:*\n"
        "   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
        "*2. –ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏:*\n"
        "   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞\n\n"
        "*3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*\n"
        "   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "*4. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n"
        "   ‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n\n"
        "*–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π:*\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞: {COSTS['product_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞: {COSTS['trend_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏: {COSTS['niche_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {COSTS['tracking']}‚ÇΩ"
    )
    await callback_query.message.edit_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
@dp.callback_query(lambda c: c.data == "profile")
async def profile_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    logger.info(f"User {user_id} requested profile")
    
    balance = subscription_manager.get_user_balance(user_id)
    tracked_items = subscription_manager.get_tracked_items(user_id)
    subscription = subscription_manager.get_subscription(user_id)
    subscription_stats = subscription_manager.get_subscription_stats(user_id)
    
    subscription_info = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    if subscription_stats:
        expiry_date = datetime.fromisoformat(subscription_stats['expiry_date'])
        days_left = (expiry_date - datetime.now()).days
        subscription_info = (
            f"üìÖ *–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:* {subscription}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            "*–õ–∏–º–∏—Ç—ã:*\n"
        )
        for action, data in subscription_stats['actions'].items():
            limit = "‚àû" if data['limit'] == float('inf') else data['limit']
            subscription_info += f"‚Ä¢ {action}: {data['used']}/{limit}\n"
    
    profile_text = (
        f"üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n"
        f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(tracked_items)}\n\n"
        f"{subscription_info}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data="tracked"),
            InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_funds")
        ],
        [InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback_query.message.edit_text(
        profile_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@dp.callback_query(lambda c: c.data == "add_funds")
async def add_funds_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.waiting_for_payment_amount)
    await callback_query.message.edit_text(
        "üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 100‚ÇΩ):",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∫–∞"
@dp.callback_query(lambda c: c.data == "subscription")
async def subscription_callback(callback_query: types.CallbackQuery):
    subscription_text = (
        "üìÖ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n"
        f"*Basic:* {SUBSCRIPTION_COSTS['basic']}‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ 10 –∞–Ω–∞–ª–∏–∑–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ 5 –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–∏—à\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 10 —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        f"*Pro:* {SUBSCRIPTION_COSTS['pro']}‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ 50 –∞–Ω–∞–ª–∏–∑–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ 20 –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–∏—à\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 50 —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        f"*Business:* {SUBSCRIPTION_COSTS['business']}‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 200 —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Basic", callback_data="subscribe_basic"),
            InlineKeyboardButton(text="Pro", callback_data="subscribe_pro"),
            InlineKeyboardButton(text="Business", callback_data="subscribe_business")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback_query.message.edit_text(
        subscription_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
@dp.callback_query(lambda c: c.data.startswith("subscribe_"))
async def handle_subscription(callback_query: types.CallbackQuery):
    subscription_type = callback_query.data.split("_")[1]
    cost = SUBSCRIPTION_COSTS[subscription_type]
    
    await callback_query.message.edit_text(
        f"üìÖ *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_type.capitalize()}*\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ/–º–µ—Å\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {cost}‚ÇΩ –Ω–∞ –Ω–∞—à —Å—á–µ—Ç\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n\n"
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        "–°–±–µ—Ä–±–∞–Ω–∫: 1234 5678 9012 3456\n"
        "QIWI: +7 (999) 123-45-67\n"
        "–ÆMoney: 4100 1234 5678 9012",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=back_keyboard()
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data == "product_search")
async def handle_global_search(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback_query.from_user.id
        logger.info(f"User {user_id} clicked global search button")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = subscription_manager.get_subscription(user_id)
        if not subscription or not subscription_manager.is_subscription_active(user_id):
            await callback_query.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–æ–∏—Å–∫—É.",
                show_alert=True
            )
            return
        
        await state.set_state(UserStates.waiting_for_search)
        
        await callback_query.message.edit_text(
            "üåê *–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `–∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞ nike` –∏–ª–∏ `iphone 15`\n\n"
            "üîç –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–ª–æ—â–∞–¥–∫–∞–º:\n"
            "‚Ä¢ VK\n"
            "‚Ä¢ Instagram\n"
            "‚Ä¢ Telegram\n"
            "‚Ä¢ Facebook\n"
            "‚Ä¢ Twitter\n\n"
            "üìä –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n"
            "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n"
            "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–µ –ø—Ä–æ–¥–∞–∂",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=back_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in global search handler: {str(e)}", exc_info=True)
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"New user started: {user_id} (@{username})")
    
    subscription_manager.add_user(user_id)
    await message.answer(WELCOME_MESSAGE, parse_mode=ParseMode.MARKDOWN, reply_markup=main_menu_kb())

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested help")
    help_text = (
        "üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "*1. –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞:*\n"
        "   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
        "*2. –ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏:*\n"
        "   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞\n\n"
        "*3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*\n"
        "   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "*4. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n"
        "   ‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n\n"
        "*–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π:*\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞: {COSTS['product_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞: {COSTS['trend_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏: {COSTS['niche_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {COSTS['tracking']}‚ÇΩ"
    )
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)

@dp.message(Command("balance"))
async def balance_handler(message: types.Message):
    user_id = message.from_user.id
    balance = subscription_manager.get_user_balance(user_id)
    logger.info(f"User {user_id} checked balance: {balance}‚ÇΩ")
    
    balance_text = (
        f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* {balance}‚ÇΩ\n\n"
        "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑:\n"
        "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É\n"
        "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
        "‚Ä¢ QIWI\n"
        "‚Ä¢ –ÆMoney"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_funds")]
    ])
    
    await message.answer(balance_text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)

@dp.message(Command("profile"))
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested profile")
    
    balance = subscription_manager.get_user_balance(user_id)
    tracked_items = subscription_manager.get_tracked_items(user_id)
    subscription = subscription_manager.get_subscription(user_id)
    subscription_stats = subscription_manager.get_subscription_stats(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription_info = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    if subscription_stats:
        expiry_date = datetime.fromisoformat(subscription_stats['expiry_date'])
        days_left = (expiry_date - datetime.now()).days
        subscription_info = (
            f"üìÖ *–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:* {subscription}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            "*–õ–∏–º–∏—Ç—ã:*\n"
        )
        for action, data in subscription_stats['actions'].items():
            limit = "‚àû" if data['limit'] == float('inf') else data['limit']
            subscription_info += f"‚Ä¢ {action}: {data['used']}/{limit}\n"
    
    profile_text = (
        f"üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n"
        f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(tracked_items)}\n\n"
        f"{subscription_info}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data="tracked"),
            InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_funds")
        ],
        [InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")]
    ])
    
    await message.answer(profile_text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('confirm_payment_') or c.data.startswith('reject_payment_'))
async def process_payment_confirmation(callback_query: types.CallbackQuery):
    try:
        action, user_id, amount = callback_query.data.split('_')[1:]
        user_id = int(user_id)
        amount = float(amount)
        
        if action == 'confirm':
            subscription_manager.update_balance(user_id, amount)
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ",
                reply_markup=main_menu_kb()
            )
            await callback_query.message.edit_text(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                reply_markup=None
            )
        else:
            await bot.send_message(
                user_id,
                "‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=main_menu_kb()
            )
            await callback_query.message.edit_text(
                f"‚ùå –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                reply_markup=None
            )
    except Exception as e:
        logger.error(f"Error confirming payment: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

@dp.callback_query(lambda c: c.data == 'product_analysis')
async def handle_product_analysis(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback_query.from_user.id
        
        can_perform = subscription_manager.can_perform_action(user_id, 'product_analysis')
        if not can_perform:
            await callback_query.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π",
                show_alert=True
            )
            return
        
        await state.set_state(UserStates.waiting_for_product)
        
        await callback_query.message.edit_text(
            "üîç *–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 12345678",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=back_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in product analysis handler: {str(e)}")
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@dp.callback_query(lambda c: c.data == 'niche_analysis')
async def handle_niche_analysis(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback_query.from_user.id
        
        can_perform = subscription_manager.can_perform_action(user_id, 'niche_analysis')
        if not can_perform:
            await callback_query.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π",
                show_alert=True
            )
            return
        
        await state.set_state(UserStates.waiting_for_niche)
        
        await callback_query.message.edit_text(
            "üîç *–ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏—à–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–µ—Ç—Å–∫–∏–µ –∏–≥—Ä—É—à–∫–∏",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=back_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in niche analysis handler: {str(e)}")
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

def extract_likes_views(block: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    block_lower = block.lower()
    matches = re.findall(r'(\d+)\s*likes,\s*(\d+)\s*comments', block_lower)
    if matches:
        try:
            return int(matches[0][0]), int(matches[0][1])
        except ValueError:
            pass
    m_likes = re.search(r'(\d+)\s*likes', block_lower)
    m_views = re.search(r'(\d+)\s*comments', block_lower)
    likes = int(m_likes.group(1)) if m_likes else 0
    views = int(m_views.group(1)) if m_views else 0
    return likes, views

def estimate_impact(likes, views):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∞–π–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤."""
    if likes == 0 and views == 0:
        likes = 10
        views = 100
    approx_clients = int(likes * 0.1 + views * 0.05)
    avg_check = 500  # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
    approx_revenue = approx_clients * avg_check
    baseline = 10000
    growth_percent = (approx_revenue / baseline) * 100 if baseline else 0
    return approx_clients, approx_revenue, growth_percent

async def get_wb_product_info(article):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ API Wildberries."""
    try:
        logger.info(f"Getting product info for article {article}")
        
        # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        price_url = f"https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&spp=27&nm={article}&locale=ru&lang=ru"
        logger.info(f"Making request to price API: {price_url}")
        
        headers = {
            'Accept': '*/*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Connection': 'keep-alive',
            'Origin': 'https://www.wildberries.ru',
            'Referer': f'https://www.wildberries.ru/catalog/{article}/detail.aspx',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
        }
        
        price_response = requests.get(price_url, headers=headers, timeout=10)
        logger.info(f"Price API response status: {price_response.status_code}")
        
        if price_response.status_code != 200:
            logger.error(f"Price API error: {price_response.text}")
            return None
            
        price_data = price_response.json()
        logger.info(f"Price API response data: {json.dumps(price_data, indent=2)}")
        
        if not price_data.get('data', {}).get('products'):
            logger.error("No products found in price API response")
            return None
            
        product = price_data['data']['products'][0]
        logger.info(f"Found product: {product.get('name')}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
        total_stock = 0
        stocks_by_size = {}
        
        for size in product.get('sizes', []):
            size_name = size.get('name', 'Unknown')
            size_stock = sum(stock.get('qty', 0) for stock in size.get('stocks', []))
            stocks_by_size[size_name] = size_stock
            total_stock += size_stock
        
        # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
        sales_today = 0
        total_sales = 0
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
        stats_url = f"https://catalog.wb.ru/sellers/v1/analytics-data?nm={article}"
        try:
            logger.info(f"Making request to seller stats API: {stats_url}")
            stats_response = requests.get(stats_url, headers=headers, timeout=10)
            logger.info(f"Seller stats API response status: {stats_response.status_code}")
            
            if stats_response.status_code == 200:
                stats_data = stats_response.json()
                logger.info(f"Seller stats API response data: {json.dumps(stats_data, indent=2)}")
                
                if 'data' in stats_data:
                    for stat in stats_data['data']:
                        if str(stat.get('nmId')) == str(article):
                            sales_today = stat.get('sales', {}).get('today', 0)
                            total_sales = stat.get('sales', {}).get('total', 0)
                            break
        except Exception as e:
            logger.error(f"Error getting seller stats: {str(e)}")
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API –∑–∞–∫–∞–∑–æ–≤
        if sales_today == 0:
            orders_url = f"https://catalog.wb.ru/sellers/v1/orders-data?nm={article}"
            try:
                logger.info(f"Making request to orders API: {orders_url}")
                orders_response = requests.get(orders_url, headers=headers, timeout=10)
                logger.info(f"Orders API response status: {orders_response.status_code}")
                
                if orders_response.status_code == 200:
                    orders_data = orders_response.json()
                    logger.info(f"Orders API response data: {json.dumps(orders_data, indent=2)}")
                    
                    if 'data' in orders_data:
                        for order in orders_data['data']:
                            if str(order.get('nmId')) == str(article):
                                sales_today = order.get('ordersToday', 0)
                                total_sales = order.get('ordersTotal', 0)
                                break
            except Exception as e:
                logger.error(f"Error getting orders data: {str(e)}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π API
        if sales_today == 0:
            old_sales_url = f"https://product-order-qnt.wildberries.ru/by-nm/?nm={article}"
            try:
                logger.info(f"Making request to old sales API: {old_sales_url}")
                old_sales_response = requests.get(old_sales_url, headers=headers, timeout=10)
                logger.info(f"Old sales API response status: {old_sales_response.status_code}")
                
                if old_sales_response.status_code == 200:
                    old_sales_data = old_sales_response.json()
                    logger.info(f"Old sales API response data: {json.dumps(old_sales_data, indent=2)}")
                    
                    if isinstance(old_sales_data, list):
                        for item in old_sales_data:
                            if str(item.get('nmId')) == str(article):
                                sales_today = item.get('qnt', 0)
                                break
            except Exception as e:
                logger.error(f"Error getting old sales data: {str(e)}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        result = {
            'name': product.get('name', ''),
            'brand': product.get('brand', ''),
            'price': {
                'current': product.get('salePriceU', 0) / 100,
                'original': product.get('priceU', 0) / 100,
                'discount': product.get('discount', 0)
            },
            'rating': product.get('rating', 0) / 10,
            'feedbacks': product.get('feedbacks', 0),
            'stocks': {
                'total': total_stock,
                'by_size': stocks_by_size
            },
            'sales': {
                'today': sales_today,
                'total': total_sales or product.get('ordersCount', 0) or product.get('salesPerMonth', 0) or 0
            }
        }
        
        logger.info(f"Final product info: {json.dumps(result, indent=2)}")
        return result
        
    except Exception as e:
        logger.error(f"Error getting WB product info: {str(e)}", exc_info=True)
        return None

async def global_search_serper_detailed(query: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API serper.dev —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ—Ü—Å–µ—Ç–µ–π."""
    try:
        logger.info(f"Starting global search for query: {query}")
        url = "https://google.serper.dev/search"
        
        payload = json.dumps({
            "q": query,
            "num": 20,
            "gl": "ru",
            "hl": "ru"
        })
        
        headers = {
            'X-API-KEY': SERPER_API_KEY,
            'Content-Type': 'application/json'
        }
        
        logger.info(f"Making request to Serper API")
        response = requests.post(url, headers=headers, data=payload)
        logger.info(f"Serper API response status: {response.status_code}")
        
        if response.status_code != 200:
            logger.error(f"Serper API error: {response.text}")
            return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞", "results": []}
            
        search_data = response.json()
        logger.info(f"Serper API response data: {json.dumps(search_data, indent=2)}")
        
        organic = search_data.get("organic", [])
        
        # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        allowed_domains = ["vk.com", "instagram.com", "t.me", "facebook.com", "twitter.com", "x.com"]
        filtered_results = []
        
        for item in organic:
            link = item.get("link", "")
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Wildberries
            if "wildberries" in link.lower():
                continue
            domain = re.sub(r'^https?://(www\.)?', '', link).split('/')[0].lower()
            if any(allowed_domain in domain for allowed_domain in allowed_domains):
                # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
                snippet = item.get("snippet", "")
                likes, views = extract_likes_views(snippet)
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ
                clients, revenue, growth = estimate_impact(likes, views)
                
                result = {
                    "title": item.get("title", ""),
                    "link": link,
                    "snippet": snippet,
                    "site": domain,
                    "likes": likes,
                    "views": views,
                    "approx_clients": clients,
                    "approx_revenue": revenue,
                    "growth_percent": growth
                }
                filtered_results.append(result)
        
        if not filtered_results:
            return {
                "error": (
                    "üîç *–ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π*\n\n"
                    "–ú—ã –ø—Ä–æ–≤–µ–ª–∏ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–ª–æ—â–∞–¥–∫–∞–º:\n"
                    "‚Ä¢ VK\n"
                    "‚Ä¢ Instagram\n"
                    "‚Ä¢ Telegram\n"
                    "‚Ä¢ Facebook\n"
                    "‚Ä¢ Twitter\n\n"
                    "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:*\n"
                    "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. "
                    "–≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å:\n"
                    "‚Ä¢ –¢–æ–≤–∞—Ä –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏\n"
                    "‚Ä¢ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
                    "‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã"
                ),
                "results": []
            }
        
        return {"error": None, "results": filtered_results}
        
    except Exception as e:
        logger.error(f"Error in global search: {str(e)}", exc_info=True)
        return {"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞", "results": []}

def format_serper_results_detailed(search_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if search_data["error"]:
        return search_data["error"]
    
    results = []
    for item in search_data["results"]:
        title = item.get("title", "").replace("*", "\\*").replace("_", "\\_").replace("`", "\\`")
        link = item.get("link", "").replace("*", "\\*").replace("_", "\\_").replace("`", "\\`")
        site = item.get("site", "").replace("*", "\\*").replace("_", "\\_").replace("`", "\\`")
        likes = item.get("likes", 0)
        views = item.get("views", 0)
        clients = item.get("approx_clients", 0)
        revenue = item.get("approx_revenue", 0)
        growth = item.get("growth_percent", 0)
        
        result = (
            f"üîó [{title}]({link})\n"
            f"üåê –ü–ª–æ—â–∞–¥–∫–∞: {site}\n"
            f"üëç –õ–∞–π–∫–∏: {likes:,}, üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views:,}\n"
            f"üë• –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {clients:,}\n"
            f"üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {revenue:,}‚ÇΩ\n"
            f"üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞: {growth:.1f}%"
        )
        results.append(result)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    header = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π*\n\n"
    stats = f"\n\nüìä –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(results)}"
    
    return header + "\n\n".join(results) + stats

@dp.message(lambda message: message.text and message.text.strip(), UserStates.waiting_for_search)
async def handle_search_query(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        search_query = message.text.strip()
        logger.info(f"Processing search query from user {user_id}: {search_query}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = subscription_manager.get_subscription(user_id)
        if not subscription or not subscription_manager.is_subscription_active(user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
            await state.clear()
            return
        
        await message.answer(
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_results = await global_search_serper_detailed(search_query)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await state.update_data(
            search_results=search_results["results"],
            current_page=0,
            query=search_query
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if search_results["error"]:
            await message.answer(
                search_results["error"],
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            first_page = search_results["results"][:5]
            formatted_results = format_serper_results_detailed({"error": None, "results": first_page})
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = []
            if len(search_results["results"]) > 5:
                keyboard.append([
                    InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="next_page")
                ])
            keyboard.append([
                InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="product_search"),
                InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")
            ])
            
            await message.answer(
                formatted_results,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                disable_web_page_preview=True
            )
        
        await state.set_state(UserStates.viewing_search_results)
        
    except Exception as e:
        logger.error(f"Error processing search query: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
        await state.clear()

@dp.callback_query(lambda c: c.data in ["next_page", "prev_page"])
async def handle_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        results = data.get("search_results", [])
        current_page = data.get("current_page", 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if callback_query.data == "next_page":
            current_page += 1
        else:
            current_page -= 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = current_page * 5
        end_idx = start_idx + 5
        current_results = results[start_idx:end_idx]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_page=current_page)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        nav_buttons = []
        
        if current_page > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="prev_page")
            )
        
        if end_idx < len(results):
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_page")
            )
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        keyboard.append([
            InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="product_search"),
            InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")
        ])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_results = format_serper_results_detailed({"error": None, "results": current_results})
        
        await callback_query.message.edit_text(
            formatted_results,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error handling pagination: {str(e)}", exc_info=True)
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
            show_alert=True
        )

@dp.message(F.photo)
async def handle_payment_screenshot(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        amount = data.get('amount')
        user_id = message.from_user.id
        
        admin_message = (
            f"üîÑ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {user_id})\n"
            f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É:"
        )
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment_{user_id}_{amount}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment_{user_id}_{amount}")
            ]
        ])
        
        await bot.send_photo(
            chat_id=ADMIN_ID,
            photo=message.photo[-1].file_id,
            caption=admin_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=admin_keyboard
        )
        
        await message.answer(
            "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=main_menu_kb()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error handling payment screenshot: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_kb()
        )
        await state.clear()

@dp.message(F.text)
async def handle_payment_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 100:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100‚ÇΩ")
            return
        
        await state.update_data(amount=amount)
        await state.set_state(UserStates.waiting_for_payment_screenshot)
        await message.answer(
            f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}‚ÇΩ\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

# –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def check_expiring_subscriptions():
    logger.info("Starting expiring subscriptions check")
    while True:
        expiring = subscription_manager.get_expiring_subscriptions()
        logger.info(f"Found {len(expiring)} expiring subscriptions")
        
        for sub in expiring:
            days_left = (datetime.fromisoformat(sub['expiry_date']) - datetime.now()).days
            if days_left <= 3:
                logger.info(f"Sending expiry notification to user {sub['user_id']}, {days_left} days left")
                await bot.send_message(
                    sub['user_id'],
                    f"‚ö†Ô∏è *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π*\n\n"
                    f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {sub['type']}\n"
                    "–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")]
                    ])
                )
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞
async def format_product_analysis(product_info, article):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞."""
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    daily_sales = product_info['sales']['today']
    estimated_week = daily_sales * 7
    estimated_month = daily_sales * 30
    
    daily_revenue = daily_sales * product_info['price']['current']
    estimated_week_revenue = estimated_week * product_info['price']['current']
    estimated_month_revenue = estimated_month * product_info['price']['current']
    
    # –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø—Ä–∏–±—ã–ª—å (–±–µ—Ä–µ–º 30% –æ—Ç –≤—ã—Ä—É—á–∫–∏)
    profit_margin = 0.3
    daily_profit = daily_revenue * profit_margin
    estimated_week_profit = estimated_week_revenue * profit_margin
    estimated_month_profit = estimated_month_revenue * profit_margin
    
    result = (
        f"üìä *–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ {article}*\n\n"
        f"*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}\n"
        f"üè∑ –ë—Ä–µ–Ω–¥: {product_info['brand']}\n"
        f"üí∞ –¶–µ–Ω–∞: {product_info['price']['current']}‚ÇΩ"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if product_info['price']['discount'] > 0:
        result += f" (-{product_info['price']['discount']}% –æ—Ç {product_info['price']['original']}‚ÇΩ)"
    
    result += (
        f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product_info['rating']:.1f}/5\n"
        f"üìù –û—Ç–∑—ã–≤–æ–≤: {product_info['feedbacks']}\n"
        f"\n*–ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö:*\n"
        f"üì¶ –í—Å–µ–≥–æ: {product_info['stocks']['total']} —à—Ç.\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
    if product_info['stocks']['by_size']:
        result += "\n*–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º:*\n"
        for size, qty in sorted(product_info['stocks']['by_size'].items()):
            if qty > 0:
                result += f"‚Ä¢ {size}: {qty} —à—Ç.\n"
    
    result += (
        f"\n*–ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞:*\n"
        f"üìà –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏: {daily_sales} —à—Ç.\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å—É—Ç–∫–∏: {daily_revenue:,.0f}‚ÇΩ\n"
        f"üíé –ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏: {daily_profit:,.0f}‚ÇΩ\n\n"
        f"*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n"
        f"üìà –ü—Ä–æ–¥–∞–∂–∏: ~{estimated_week} —à—Ç.\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: ~{estimated_week_revenue:,.0f}‚ÇΩ\n"
        f"üíé –ü—Ä–∏–±—ã–ª—å: ~{estimated_week_profit:,.0f}‚ÇΩ\n\n"
        f"*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:*\n"
        f"üìà –ü—Ä–æ–¥–∞–∂–∏: ~{estimated_month} —à—Ç.\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: ~{estimated_month_revenue:,.0f}‚ÇΩ\n"
        f"üíé –ü—Ä–∏–±—ã–ª—å: ~{estimated_month_profit:,.0f}‚ÇΩ\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    if product_info['rating'] < 4:
        recommendations.append("–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
    if product_info['feedbacks'] < 100:
        recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤")
    if product_info['stocks']['total'] < 10:
        recommendations.append("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞")
    if product_info['price']['discount'] > 30:
        recommendations.append("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É")
    if product_info['sales']['today'] == 0 and product_info['stocks']['total'] > 0:
        recommendations.append("–ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    
    if recommendations:
        result += "\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        for rec in recommendations:
            result += f"üí° {rec}\n"
    
    return result

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ main
async def main():
    logger.info("Starting bot...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(check_expiring_subscriptions())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main()) 