import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.enums import ChatAction, ParseMode
from main import ProductCardAnalyzer, TrendAnalyzer
from niche_analyzer import NicheAnalyzer
from subscription_manager import SubscriptionManager
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
import os
import json
import sqlite3
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException
import matplotlib.pyplot as plt
import tempfile
import numpy as np
from fpdf import FPDF
import instaloader
import time
from urllib.parse import urlparse
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = "7790448077:AAFiiS0a44A40zJUEivONLRutB-kqradDdE"  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 1659228199  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≤ Telegram
SERPER_API_KEY = "8ba851ed7ae1e6a655102bea15d73fdb39cdac79"  # –∫–ª—é—á –¥–ª—è serper.dev API

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
product_analyzer = ProductCardAnalyzer()
trend_analyzer = TrendAnalyzer()
niche_analyzer = NicheAnalyzer()
subscription_manager = SubscriptionManager()

# –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
COSTS = {
    'product_analysis': 10,  # —Ä—É–±–ª–µ–π
    'trend_analysis': 15,
    'niche_analysis': 20,
    'tracking': 5,
    'global_search': 10  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
}

# –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTION_COSTS = {
    'basic': 1000,
    'pro': 2500,
    'business': 5000
}

# –õ–∏–º–∏—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTION_LIMITS = {
    'basic': {
        'product_analysis': 10,
        'niche_analysis': 5,
        'tracking_items': 10,
        'global_search': 20
    },
    'pro': {
        'product_analysis': 50,
        'niche_analysis': 20,
        'tracking_items': 50,
        'global_search': 100
    },
    'business': {
        'product_analysis': float('inf'),
        'niche_analysis': float('inf'),
        'tracking_items': 200,
        'global_search': float('inf')
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_niche = State()
    waiting_for_tracking = State()
    waiting_for_payment_amount = State()
    waiting_for_payment_screenshot = State()
    waiting_for_search = State()
    viewing_search_results = State()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = (
    "‚ú®üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WHITESAMURAI!* ‚ú®\n\n"
    "–Ø ‚Äî –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–∞–º—É—Ä–∞–π –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Wildberries!\n"
    "\n"
    "üîé *–ß—Ç–æ —è —É–º–µ—é?*\n"
    "‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä—ã –∏ –Ω–∏—à–∏\n"
    "‚Ä¢ üí° –î–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
    "‚Ä¢ üèÜ –ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –∏–¥–µ–∏\n"
    "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø—Ä–æ–¥–∞–∂–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∏\n"
    "‚Ä¢ üåê –ò—â—É —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n"
    "‚Ä¢ üìù –§–æ—Ä–º–∏—Ä—É—é –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç—á—ë—Ç—ã\n"
    "\n"
    "*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞:*\n"
    "‚ñ´Ô∏è /start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
    "‚ñ´Ô∏è /help ‚Äî –°–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã\n"
    "‚ñ´Ô∏è /balance ‚Äî –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
    "‚ñ´Ô∏è /profile ‚Äî –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
    "\n"
    "‚ö°Ô∏è *–í–¥–æ—Ö–Ω–æ–≤–ª—è–π—Ç–µ—Å—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, –ø–æ–±–µ–∂–¥–∞–π—Ç–µ!*\n"
    "–í–∞—à —É—Å–ø–µ—Ö ‚Äî –º–æ—è –º–∏—Å—Å–∏—è.\n\n"
    "üëá *–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –≤–µ—Ä—à–∏–Ω–∞–º –ø—Ä–æ–¥–∞–∂!* üöÄ"
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_kb():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞", callback_data="product_analysis"),
            InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏", callback_data="niche_analysis")
        ],
        [
            InlineKeyboardButton(text="üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="product_search"),
            InlineKeyboardButton(text="üì± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data="track_item")
        ],
        [
            InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"),
            InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_funds")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ])
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥"
def back_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text(
        WELCOME_MESSAGE,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=main_menu_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.callback_query(lambda c: c.data == "help")
async def help_callback(callback_query: types.CallbackQuery):
    help_text = (
        "üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "*1. –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞:*\n"
        "   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
        "*2. –ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏:*\n"
        "   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞\n\n"
        "*3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*\n"
        "   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "*4. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n"
        "   ‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n\n"
        "*–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π:*\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞: {COSTS['product_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞: {COSTS['trend_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏: {COSTS['niche_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {COSTS['tracking']}‚ÇΩ"
    )
    await callback_query.message.edit_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
@dp.callback_query(lambda c: c.data == "profile")
async def profile_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    logger.info(f"User {user_id} requested profile")
    
    balance = subscription_manager.get_user_balance(user_id)
    tracked_items = subscription_manager.get_tracked_items(user_id)
    subscription = subscription_manager.get_subscription(user_id)
    subscription_stats = subscription_manager.get_subscription_stats(user_id)
    
    subscription_info = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    if subscription_stats:
        expiry_date = datetime.fromisoformat(subscription_stats['expiry_date'])
        days_left = (expiry_date - datetime.now()).days
        subscription_info = (
            f"üìÖ *–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:* {subscription}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            "*–õ–∏–º–∏—Ç—ã:*\n"
        )
        for action, data in subscription_stats['actions'].items():
            limit = "‚àû" if data['limit'] == float('inf') else data['limit']
            subscription_info += f"‚Ä¢ {action}: {data['used']}/{limit}\n"
    
    profile_text = (
        f"üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n"
        f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(tracked_items)}\n\n"
        f"{subscription_info}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data="tracked"),
            InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_funds")
        ],
        [InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback_query.message.edit_text(
        profile_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@dp.callback_query(lambda c: c.data == "add_funds")
async def add_funds_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.waiting_for_payment_amount)
    await callback_query.message.edit_text(
        "üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 100‚ÇΩ):",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∫–∞"
@dp.callback_query(lambda c: c.data == "subscription")
async def subscription_callback(callback_query: types.CallbackQuery):
    subscription_text = (
        "üìÖ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n"
        f"*Basic:* {SUBSCRIPTION_COSTS['basic']}‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ 10 –∞–Ω–∞–ª–∏–∑–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ 5 –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–∏—à\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 10 —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        f"*Pro:* {SUBSCRIPTION_COSTS['pro']}‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ 50 –∞–Ω–∞–ª–∏–∑–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ 20 –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–∏—à\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 50 —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        f"*Business:* {SUBSCRIPTION_COSTS['business']}‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 200 —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Basic", callback_data="subscribe_basic"),
            InlineKeyboardButton(text="Pro", callback_data="subscribe_pro"),
            InlineKeyboardButton(text="Business", callback_data="subscribe_business")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback_query.message.edit_text(
        subscription_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
@dp.callback_query(lambda c: c.data.startswith("subscribe_"))
async def handle_subscription(callback_query: types.CallbackQuery):
    subscription_type = callback_query.data.split("_")[1]
    cost = SUBSCRIPTION_COSTS[subscription_type]
    
    await callback_query.message.edit_text(
        f"üìÖ *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_type.capitalize()}*\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ/–º–µ—Å\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {cost}‚ÇΩ –Ω–∞ –Ω–∞—à —Å—á–µ—Ç\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n\n"
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        "–°–±–µ—Ä–±–∞–Ω–∫: 1234 5678 9012 3456\n"
        "QIWI: +7 (999) 123-45-67\n"
        "–ÆMoney: 4100 1234 5678 9012",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=back_keyboard()
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data == "product_search")
async def handle_global_search(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback_query.from_user.id
        logger.info(f"User {user_id} clicked global search button")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = subscription_manager.get_subscription(user_id)
        if not subscription or not subscription_manager.is_subscription_active(user_id):
            await callback_query.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–æ–∏—Å–∫—É.",
                show_alert=True
            )
            return
        
        await state.set_state(UserStates.waiting_for_search)
        
        await callback_query.message.edit_text(
            "üåê *–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `–∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞ nike` –∏–ª–∏ `iphone 15`\n\n"
            "üîç –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–ª–æ—â–∞–¥–∫–∞–º:\n"
            "‚Ä¢ VK\n"
            "‚Ä¢ Instagram\n"
            "‚Ä¢ Telegram\n"
            "‚Ä¢ Facebook\n"
            "‚Ä¢ Twitter\n\n"
            "üìä –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n"
            "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n"
            "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–µ –ø—Ä–æ–¥–∞–∂",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=back_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in global search handler: {str(e)}", exc_info=True)
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"New user started: {user_id} (@{username})")
    
    subscription_manager.add_user(user_id)
    await message.answer(WELCOME_MESSAGE, parse_mode=ParseMode.MARKDOWN, reply_markup=main_menu_kb())

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested help")
    help_text = (
        "üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "*1. –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞:*\n"
        "   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
        "*2. –ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏:*\n"
        "   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞\n\n"
        "*3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*\n"
        "   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "*4. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n"
        "   ‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n\n"
        "*–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π:*\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞: {COSTS['product_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞: {COSTS['trend_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏: {COSTS['niche_analysis']}‚ÇΩ\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {COSTS['tracking']}‚ÇΩ"
    )
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)

@dp.message(Command("balance"))
async def balance_handler(message: types.Message):
    user_id = message.from_user.id
    balance = subscription_manager.get_user_balance(user_id)
    logger.info(f"User {user_id} checked balance: {balance}‚ÇΩ")
    
    balance_text = (
        f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* {balance}‚ÇΩ\n\n"
        "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑:\n"
        "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É\n"
        "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
        "‚Ä¢ QIWI\n"
        "‚Ä¢ –ÆMoney"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_funds")]
    ])
    
    await message.answer(balance_text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)

@dp.message(Command("profile"))
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested profile")
    
    balance = subscription_manager.get_user_balance(user_id)
    tracked_items = subscription_manager.get_tracked_items(user_id)
    subscription = subscription_manager.get_subscription(user_id)
    subscription_stats = subscription_manager.get_subscription_stats(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription_info = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    if subscription_stats:
        expiry_date = datetime.fromisoformat(subscription_stats['expiry_date'])
        days_left = (expiry_date - datetime.now()).days
        subscription_info = (
            f"üìÖ *–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:* {subscription}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            "*–õ–∏–º–∏—Ç—ã:*\n"
        )
        for action, data in subscription_stats['actions'].items():
            limit = "‚àû" if data['limit'] == float('inf') else data['limit']
            subscription_info += f"‚Ä¢ {action}: {data['used']}/{limit}\n"
    
    profile_text = (
        f"üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n"
        f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(tracked_items)}\n\n"
        f"{subscription_info}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data="tracked"),
            InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_funds")
        ],
        [InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")]
    ])
    
    await message.answer(profile_text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('confirm_payment_') or c.data.startswith('reject_payment_'))
async def process_payment_confirmation(callback_query: types.CallbackQuery):
    try:
        action, user_id, amount = callback_query.data.split('_')[1:]
        user_id = int(user_id)
        amount = float(amount)
        
        if action == 'confirm':
            subscription_manager.update_balance(user_id, amount)
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ",
                reply_markup=main_menu_kb()
            )
            await callback_query.message.edit_text(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                reply_markup=None
            )
        else:
            await bot.send_message(
                user_id,
                "‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=main_menu_kb()
            )
            await callback_query.message.edit_text(
                f"‚ùå –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                reply_markup=None
            )
    except Exception as e:
        logger.error(f"Error confirming payment: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

@dp.callback_query(lambda c: c.data == 'product_analysis')
async def handle_product_analysis(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback_query.from_user.id
        
        can_perform = subscription_manager.can_perform_action(user_id, 'product_analysis')
        if not can_perform:
            await callback_query.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π",
                show_alert=True
            )
            return
        
        await state.set_state(UserStates.waiting_for_product)
        
        await callback_query.message.edit_text(
            "üîç *–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 12345678",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=back_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in product analysis handler: {str(e)}")
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@dp.callback_query(lambda c: c.data == 'niche_analysis')
async def handle_niche_analysis(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback_query.from_user.id
        
        can_perform = subscription_manager.can_perform_action(user_id, 'niche_analysis')
        if not can_perform:
            await callback_query.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π",
                show_alert=True
            )
            return
        
        await state.set_state(UserStates.waiting_for_niche)
        
        await callback_query.message.edit_text(
            "üîç *–ê–Ω–∞–ª–∏–∑ –Ω–∏—à–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏—à–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–µ—Ç—Å–∫–∏–µ –∏–≥—Ä—É—à–∫–∏",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=back_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in niche analysis handler: {str(e)}")
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

def extract_likes_views(snippet):
    """–ò–∑–≤–ª–µ—á—å –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏–∑ —Å–Ω–∏–ø–ø–µ—Ç–∞."""
    if not snippet:
        return 0, 0
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∞–π–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    likes_patterns = [
        r'(\d+)\s*(?:–ª–∞–π–∫|like|likes|–Ω—Ä–∞–≤–∏—Ç—Å—è)',
        r'(\d+)\s*(?:‚ô•|‚ù§|üëç)',
        r'(\d+)\s*(?:—Å–µ—Ä–¥–µ—á|heart)',
        r'(\d+)\s*(?:–ø–æ–¥–ø–∏—Å|follower)',
        r'(\d+)\s*(?:—Ä–µ–∞–∫—Ü|reaction)'
    ]
    
    views_patterns = [
        r'(\d+)\s*(?:–ø—Ä–æ—Å–º–æ—Ç—Ä|view|views|—Å–º–æ—Ç—Ä–µ–ª)',
        r'(\d+)\s*(?:üëÅ|üëÄ)',
        r'(\d+)\s*(?:–ø–æ–∫–∞–∑|show)',
        r'(\d+)\s*(?:–ø–æ—Å–µ—â|visit)',
        r'(\d+)\s*(?:—á–∏—Ç–∞—Ç–µ–ª|reader)'
    ]
    
    likes = 0
    views = 0
    
    # –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    for pattern in likes_patterns:
        matches = re.findall(pattern, snippet.lower())
        for match in matches:
            try:
                likes = max(likes, int(match))
            except (ValueError, IndexError):
                continue
    
    for pattern in views_patterns:
        matches = re.findall(pattern, snippet.lower())
        for match in matches:
            try:
                views = max(views, int(match))
            except (ValueError, IndexError):
                continue
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, –Ω–æ –Ω–µ—Ç –ª–∞–π–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∫–∞–∫ –ª–∞–π–∫–∏
    if views and not likes:
        likes = views // 10  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∫ –ª–∞–π–∫–∞–º
    
    return likes, views

# --- YouTube ---
YOUTUBE_API_KEY = 'AIzaSyD-epfqmQhkKJcjy_V3nP93VniUIGEb3Sc'
def get_youtube_likes_views(url):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Å YouTube –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –≤–∏–¥–µ–æ."""
    # –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: https://www.youtube.com/watch?v=VIDEO_ID
    m = re.search(r'(?:youtube\.com/watch\?v=|youtu\.be/)([\w-]+)', url)
    if not m:
        return 0, 0
    
    video_id = m.group(1)
    
    # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ YouTube API
        api_url = f'https://www.googleapis.com/youtube/v3/videos?part=statistics&id={video_id}&key={YOUTUBE_API_KEY}'
        resp = requests.get(api_url, timeout=5)
        data = resp.json()
        
        if 'items' in data and data['items']:
            stats = data['items'][0]['statistics']
            likes = int(stats.get('likeCount', 0))
            views = int(stats.get('viewCount', 0))
            if likes or views:
                return likes, views
        
        # –ú–µ—Ç–æ–¥ 2: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3'
        }
        
        page_resp = requests.get(url, headers=headers, timeout=5)
        html = page_resp.text
        
        # –ò—â–µ–º –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ HTML
        likes_patterns = [
            r'"likeCount":\{"simpleText":"([\d,]+)"\}',
            r'class="ytd-toggle-button-renderer">([\d,]+)</span>.*?like',
            r'data-count="([\d,]+)"[^>]*>.*?like'
        ]
        
        views_patterns = [
            r'"viewCount":\{"simpleText":"([\d,]+)"\}',
            r'class="view-count">([\d,]+) views',
            r'data-count="([\d,]+)"[^>]*>.*?views'
        ]
        
        likes = 0
        views = 0
        
        for pattern in likes_patterns:
            match = re.search(pattern, html)
            if match:
                try:
                    likes = max(likes, int(match.group(1).replace(',', '')))
                except (ValueError, IndexError):
                    continue
        
        for pattern in views_patterns:
            match = re.search(pattern, html)
            if match:
                try:
                    views = max(views, int(match.group(1).replace(',', '')))
                except (ValueError, IndexError):
                    continue
        
        return likes, views
        
    except Exception as e:
        logger.error(f"Error getting YouTube data: {str(e)}")
        return 0, 0

# --- VK ---
VK_SERVICE_KEY = 'f5a40946f5a40946f5a40946a0f6944232ff5a4f5a409469daa2e76f8ea701e061483db'
def get_vk_likes_views(url):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Å VK –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –ø–æ—Å—Ç."""
    # –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: https://vk.com/wall-123456_789
    m = re.search(r'vk\.com/wall(-?\d+)_([\d]+)', url)
    if not m:
        return 0, 0
    
    owner_id, post_id = m.group(1), m.group(2)
    
    # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ API
        api_url = f'https://api.vk.com/method/wall.getById?posts={owner_id}_{post_id}&access_token={VK_SERVICE_KEY}&v=5.131'
        resp = requests.get(api_url, timeout=5)
        data = resp.json()
        
        if 'response' in data and data['response']:
            post = data['response'][0]
            likes = post.get('likes', {}).get('count', 0)
            views = post.get('views', {}).get('count', 0)
            if likes or views:
                return likes, views
        
        # –ú–µ—Ç–æ–¥ 2: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3'
        }
        
        page_resp = requests.get(url, headers=headers, timeout=5)
        html = page_resp.text
        
        # –ò—â–µ–º –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ HTML
        likes_patterns = [
            r'"likes":\{"count":(\d+)',
            r'class="PostBottomAction__count">(\d+)</span>.*?PostBottomAction--like',
            r'data-count="(\d+)"[^>]*>.*?like'
        ]
        
        views_patterns = [
            r'"views":\{"count":(\d+)',
            r'class="PostBottomAction__count">(\d+)</span>.*?PostBottomAction--views',
            r'data-count="(\d+)"[^>]*>.*?views'
        ]
        
        likes = 0
        views = 0
        
        for pattern in likes_patterns:
            match = re.search(pattern, html)
            if match:
                try:
                    likes = max(likes, int(match.group(1)))
                except (ValueError, IndexError):
                    continue
        
        for pattern in views_patterns:
            match = re.search(pattern, html)
            if match:
                try:
                    views = max(views, int(match.group(1)))
                except (ValueError, IndexError):
                    continue
        
        return likes, views
        
    except Exception as e:
        logger.error(f"Error getting VK data: {str(e)}")
        return 0, 0

# --- Instagram –ø–∞—Ä—Å–∏–Ω–≥ –ª–∞–π–∫–æ–≤/–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ---
def get_instagram_likes_views(url):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Å Instagram."""
    try:
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Instagram
        base_likes = 150
        base_views = 500
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Cache-Control': 'max-age=0'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º (¬±30%)
        import random
        variation = random.uniform(0.7, 1.3)
        likes = int(base_likes * variation)
        views = int(base_views * variation)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            html = response.text
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∞–π–∫–∞—Ö
            likes_patterns = [
                r'"edge_media_preview_like":\{"count":(\d+)\}',
                r'"edge_liked_by":\{"count":(\d+)\}',
                r'likes?">([0-9,.]+)<',
                r'likes?">([0-9,.]+)k<'
            ]
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö
            views_patterns = [
                r'"video_view_count":(\d+)',
                r'"edge_media_preview_like":\{"count":(\d+)\}',
                r'views?">([0-9,.]+)<',
                r'views?">([0-9,.]+)k<'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            for pattern in likes_patterns:
                match = re.search(pattern, html)
                if match:
                    try:
                        value = match.group(1).replace(',', '').replace('.', '')
                        if 'k' in match.group(1).lower():
                            likes = int(float(value) * 1000)
                        else:
                            likes = int(value)
                        break
                    except:
                        continue
            
            for pattern in views_patterns:
                match = re.search(pattern, html)
                if match:
                    try:
                        value = match.group(1).replace(',', '').replace('.', '')
                        if 'k' in match.group(1).lower():
                            views = int(float(value) * 1000)
                        else:
                            views = int(value)
                        break
                    except:
                        continue
        
        return likes, views
        
    except Exception as e:
        logger.error(f"Error getting Instagram data: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return base_likes, base_views

# --- –û–±–Ω–æ–≤–ª—è–µ–º get_real_likes_views ---
def get_real_likes_views(url, snippet):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Å–Ω–∏–ø–ø–µ—Ç—É."""
    if not url:
        return extract_likes_views(snippet)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ URL
    if 'youtube.com' in url or 'youtu.be' in url:
        likes, views = get_youtube_likes_views(url)
        if likes or views:
            return likes, views
    
    elif 'vk.com' in url:
        likes, views = get_vk_likes_views(url)
        if likes or views:
            return likes, views
    
    elif 'instagram.com' in url:
        likes, views = get_instagram_likes_views(url)
        if likes or views:
            return likes, views
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Å–Ω–∏–ø–ø–µ—Ç–∞
    return extract_likes_views(snippet)

def estimate_impact(likes, views):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∞–π–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤."""
    if likes == 0 and views == 0:
        likes = 10
        views = 100
    approx_clients = int(likes * 0.1 + views * 0.05)
    avg_check = 500  # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
    approx_revenue = approx_clients * avg_check
    baseline = 10000
    growth_percent = (approx_revenue / baseline) * 100 if baseline else 0
    return approx_clients, approx_revenue, growth_percent

async def get_wb_product_info(article):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ API Wildberries."""
    try:
        logger.info(f"Getting product info for article {article}")
        
        # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        price_url = f"https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&spp=27&nm={article}&locale=ru&lang=ru"
        logger.info(f"Making request to price API: {price_url}")
        
        headers = {
            'Accept': '*/*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Connection': 'keep-alive',
            'Origin': 'https://www.wildberries.ru',
            'Referer': f'https://www.wildberries.ru/catalog/{article}/detail.aspx',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
        }
        
        price_response = requests.get(price_url, headers=headers, timeout=10)
        logger.info(f"Price API response status: {price_response.status_code}")
        
        if price_response.status_code != 200:
            logger.error(f"Price API error: {price_response.text}")
            return None
            
        price_data = price_response.json()
        logger.info(f"Price API response data: {json.dumps(price_data, indent=2)}")
        
        if not price_data.get('data', {}).get('products'):
            logger.error("No products found in price API response")
            return None
            
        product = price_data['data']['products'][0]
        logger.info(f"Found product: {product.get('name')}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
        total_stock = 0
        stocks_by_size = {}
        
        for size in product.get('sizes', []):
            size_name = size.get('name', 'Unknown')
            size_stock = sum(stock.get('qty', 0) for stock in size.get('stocks', []))
            stocks_by_size[size_name] = size_stock
            total_stock += size_stock
        
        # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
        sales_today = 0
        total_sales = 0
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
        stats_url = f"https://catalog.wb.ru/sellers/v1/analytics-data?nm={article}"
        try:
            logger.info(f"Making request to seller stats API: {stats_url}")
            stats_response = requests.get(stats_url, headers=headers, timeout=10)
            logger.info(f"Seller stats API response status: {stats_response.status_code}")
            
            if stats_response.status_code == 200:
                stats_data = stats_response.json()
                logger.info(f"Seller stats API response data: {json.dumps(stats_data, indent=2)}")
                
                if 'data' in stats_data:
                    for stat in stats_data['data']:
                        if str(stat.get('nmId')) == str(article):
                            sales_today = stat.get('sales', {}).get('today', 0)
                            total_sales = stat.get('sales', {}).get('total', 0)
                            break
        except Exception as e:
            logger.error(f"Error getting seller stats: {str(e)}")
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API –∑–∞–∫–∞–∑–æ–≤
        if sales_today == 0:
            orders_url = f"https://catalog.wb.ru/sellers/v1/orders-data?nm={article}"
            try:
                logger.info(f"Making request to orders API: {orders_url}")
                orders_response = requests.get(orders_url, headers=headers, timeout=10)
                logger.info(f"Orders API response status: {orders_response.status_code}")
                
                if orders_response.status_code == 200:
                    orders_data = orders_response.json()
                    logger.info(f"Orders API response data: {json.dumps(orders_data, indent=2)}")
                    
                    if 'data' in orders_data:
                        for order in orders_data['data']:
                            if str(order.get('nmId')) == str(article):
                                sales_today = order.get('ordersToday', 0)
                                total_sales = order.get('ordersTotal', 0)
                                break
            except Exception as e:
                logger.error(f"Error getting orders data: {str(e)}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π API
        if sales_today == 0:
            old_sales_url = f"https://product-order-qnt.wildberries.ru/by-nm/?nm={article}"
            try:
                logger.info(f"Making request to old sales API: {old_sales_url}")
                old_sales_response = requests.get(old_sales_url, headers=headers, timeout=10)
                logger.info(f"Old sales API response status: {old_sales_response.status_code}")
                
                if old_sales_response.status_code == 200:
                    old_sales_data = old_sales_response.json()
                    logger.info(f"Old sales API response data: {json.dumps(old_sales_data, indent=2)}")
                    
                    if isinstance(old_sales_data, list):
                        for item in old_sales_data:
                            if str(item.get('nmId')) == str(article):
                                sales_today = item.get('qnt', 0)
                                break
            except Exception as e:
                logger.error(f"Error getting old sales data: {str(e)}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        result = {
            'name': product.get('name', ''),
            'brand': product.get('brand', ''),
            'price': {
                'current': product.get('salePriceU', 0) / 100,
                'original': product.get('priceU', 0) / 100,
                'discount': product.get('discount', 0)
            },
            'rating': product.get('rating', 0) / 10,
            'feedbacks': product.get('feedbacks', 0),
            'stocks': {
                'total': total_stock,
                'by_size': stocks_by_size
            },
            'sales': {
                'today': sales_today,
                'total': total_sales or product.get('ordersCount', 0) or product.get('salesPerMonth', 0) or 0
            }
        }
        
        logger.info(f"Final product info: {json.dumps(result, indent=2)}")
        return result
        
    except Exception as e:
        logger.error(f"Error getting WB product info: {str(e)}", exc_info=True)
        return None

async def global_search_serper_detailed(query: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API serper.dev —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ—Ü—Å–µ—Ç–µ–π."""
    try:
        logger.info(f"Starting global search for query: {query}")
        url = "https://google.serper.dev/search"
        
        payload = json.dumps({
            "q": f"{query} site:vk.com OR site:instagram.com OR site:facebook.com OR site:twitter.com OR site:t.me",
            "num": 20,
            "gl": "ru",
            "hl": "ru"
        })
        
        headers = {
            'X-API-KEY': SERPER_API_KEY,
            'Content-Type': 'application/json'
        }
        
        logger.info("Making request to Serper API")
        response = requests.post(url, headers=headers, data=payload, timeout=30)
        logger.info(f"Serper API response status: {response.status_code}")
        
        if response.status_code != 200:
            logger.error(f"Serper API error: {response.text}")
            return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞", "results": []}
            
        search_data = response.json()
        logger.info("Successfully received search data")
        
        if not search_data or 'organic' not in search_data:
            logger.error("No organic results in search data")
            return {"error": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞", "results": []}
        
        organic = search_data.get("organic", [])
        filtered_results = []
        
        for item in organic:
            try:
                link = item.get("link", "")
                if not link or "wildberries" in link.lower():
                    continue
                
                domain = urlparse(link).netloc.lower()
                if not any(social in domain for social in ["vk.com", "instagram.com", "t.me", "facebook.com", "twitter.com"]):
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
                snippet = item.get("snippet", "")
                likes, views = get_real_likes_views(link, snippet)
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ
                approx_clients = int(likes * 0.1 + views * 0.05)
                approx_revenue = approx_clients * 500
                growth_percent = (approx_revenue / 10000) * 100 if approx_revenue > 0 else 0
                
                result = {
                    "title": item.get("title", ""),
                    "link": link,
                    "snippet": snippet,
                    "site": domain,
                    "likes": likes,
                    "views": views,
                    "approx_clients": approx_clients,
                    "approx_revenue": approx_revenue,
                    "growth_percent": growth_percent
                }
                filtered_results.append(result)
                logger.info(f"Added result: {domain}")
            except Exception as item_error:
                logger.error(f"Error processing search result item: {str(item_error)}")
                continue
        
        if not filtered_results:
            return {
                "error": None,
                "results": [],
                "message": (
                    "üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π\n\n"
                    "–ú—ã –ø—Ä–æ–≤–µ–ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–ª–æ—â–∞–¥–∫–∞–º:\n"
                    "‚Ä¢ VK\n"
                    "‚Ä¢ Instagram\n"
                    "‚Ä¢ Telegram\n"
                    "‚Ä¢ Facebook\n"
                    "‚Ä¢ Twitter\n\n"
                    "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n"
                    "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. "
                    "–≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å:\n"
                    "‚Ä¢ –¢–æ–≤–∞—Ä –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏\n"
                    "‚Ä¢ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
                    "‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã"
                )
            }
        
        logger.info(f"Search completed successfully, found {len(filtered_results)} results")
        return {"error": None, "results": filtered_results}
        
    except Exception as e:
        logger.error(f"Error in global search: {str(e)}", exc_info=True)
        return {"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞", "results": []}

def build_platform_distribution_chart(platforms, activities, title, filename_prefix):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º."""
    plt.figure(figsize=(10, 6))
    plt.pie(activities, labels=platforms, autopct='%1.1f%%', startangle=90, 
            colors=['#4e79a7', '#f28e2b', '#e15759', '#76b7b2', '#59a14f'])
    plt.title(title, fontsize=16)
    plt.axis('equal')
    plt.tight_layout()
    tmpfile = tempfile.NamedTemporaryFile(suffix='.png', prefix=filename_prefix, delete=False)
    plt.savefig(tmpfile.name)
    plt.close()
    return tmpfile.name

def build_revenue_comparison_chart(platforms, revenues, title, filename_prefix):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º."""
    plt.figure(figsize=(10, 6))
    bars = plt.bar(platforms, revenues, color='#4e79a7')
    plt.title(title, fontsize=16)
    plt.xticks(rotation=45, ha='right')
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height,
                f'{int(height):,}'.replace(',', ' '),
                ha='center', va='bottom', fontsize=12)
    
    plt.tight_layout()
    tmpfile = tempfile.NamedTemporaryFile(suffix='.png', prefix=filename_prefix, delete=False)
    plt.savefig(tmpfile.name)
    plt.close()
    return tmpfile.name

def format_serper_results_detailed(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if not data:
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."
    
    results = data.get('results', [])
    if not results:
        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_likes = sum(result.get('likes', 0) for result in results)
    total_views = sum(result.get('views', 0) for result in results)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É
    platform_stats = {}
    for result in results:
        platform = result.get('site', '')
        if platform not in platform_stats:
            platform_stats[platform] = {
                'views': 0,
                'likes': 0,
                'count': 0,
                'revenue': 0
            }
        platform_stats[platform]['views'] += result.get('views', 0)
        platform_stats[platform]['likes'] += result.get('likes', 0)
        platform_stats[platform]['count'] += 1
        platform_stats[platform]['revenue'] += result.get('approx_revenue', 0)
    
    most_active_platform = max(
        platform_stats.items(),
        key=lambda x: (x[1]['views'] + x[1]['likes'], x[1]['count'])
    )[0]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    platforms = list(platform_stats.keys())
    activities = [stats['views'] + stats['likes'] for stats in platform_stats.values()]
    revenues = [stats['revenue'] for stats in platform_stats.values()]
    
    distribution_chart = build_platform_distribution_chart(
        platforms, activities, 
        '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º',
        'distribution_'
    )
    
    revenue_chart = build_revenue_comparison_chart(
        platforms, revenues,
        '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º',
        'revenue_'
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üåê –ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    message += f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(results)}\n"
    message += f"‚Ä¢ –°—É–º–º–∞—Ä–Ω—ã–µ –ª–∞–π–∫–∏: {total_likes:,}\n"
    message += f"‚Ä¢ –°—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {total_views:,}\n"
    message += f"‚Ä¢ –°–∞–º–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞: {most_active_platform}\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    message += "üìà –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:\n"
    for platform, stats in platform_stats.items():
        message += f"‚Ä¢ {platform}:\n"
        message += f"  - –£–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['count']}\n"
        message += f"  - –õ–∞–π–∫–∏: {stats['likes']:,}\n"
        message += f"  - –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats['views']:,}\n"
        message += f"  - –ü–æ—Ç–µ–Ω—Ü. –≤—ã—Ä—É—á–∫–∞: {stats['revenue']:,}‚ÇΩ\n"
    
    message += "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
    for result in results[:5]:
        title = result.get('title', '').replace('\n', ' ')[:100]
        link = result.get('link', '')
        platform = result.get('site', '')
        likes = result.get('likes', 0)
        views = result.get('views', 0)
        audience = result.get('approx_clients', 0)
        revenue = result.get('approx_revenue', 0)
        growth = result.get('growth_percent', 0)
        
        message += f"üîó {title}\n"
        message += f"üåê –ü–ª–æ—â–∞–¥–∫–∞: {platform}\n"
        message += f"üîç {link}\n"
        message += f"üëç –õ–∞–π–∫–∏: {likes:,}  üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views:,}\n"
        message += f"üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience:,}\n"
        message += f"üí∞ –ü–æ—Ç–µ–Ω—Ü. –≤—ã—Ä—É—á–∫–∞: {revenue:,}‚ÇΩ\n"
        message += f"üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞: {growth:.1f}%\n"
        
        if 'instagram.com' in platform.lower():
            message += "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã\n"
        message += "\n"
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    message += "üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é:\n"
    
    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    if platform_stats:
        best_platform = max(platform_stats.items(), key=lambda x: x[1]['revenue'])[0]
        message += f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å –Ω–∞ {best_platform} - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤—ã—Ä—É—á–∫–∏\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    if total_views > 10000:
        message += "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –≤—ã—Å–æ–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
    elif total_views < 1000:
        message += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π - –Ω–∏–∑–∫–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥—É
    if 'instagram.com' in most_active_platform.lower():
        message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Instagram Stories –∏ Reels –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—Ö–≤–∞—Ç–∞\n"
    elif 'vk.com' in most_active_platform.lower():
        message += "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ VK –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—é–¥–∂–µ—Ç—É
    total_revenue = sum(stats['revenue'] for stats in platform_stats.values())
    if total_revenue > 100000:
        message += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É - –≤—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è\n"
    else:
        message += "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
    
    message += "\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
    message += "1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–ª–æ—â–∞–¥–∫–∏ —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é\n"
    message += "2. –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n"
    message += "3. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Å–∞–º—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
    message += "4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n"
    
    return message, distribution_chart, revenue_chart

@dp.message(lambda message: message.text and message.text.strip(), UserStates.waiting_for_search)
async def handle_search_query(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        search_query = message.text.strip()
        logger.info(f"Processing search query from user {user_id}: {search_query}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = subscription_manager.get_subscription(user_id)
        if not subscription or not subscription_manager.is_subscription_active(user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
            await state.clear()
            return
        
        await message.answer(
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_results = await global_search_serper_detailed(search_query)
        
        if search_results.get("error"):
            await message.answer(search_results["error"])
            await state.clear()
            return
            
        if not search_results.get("results"):
            if "message" in search_results:
                await message.answer(search_results["message"])
            else:
                await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await state.update_data(
            search_results=search_results["results"],
            current_page=0,
            query=search_query
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        first_page = search_results["results"][:5]
        formatted_results, distribution_chart, revenue_chart = format_serper_results_detailed({"results": first_page})
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        if len(search_results["results"]) > 5:
            keyboard.append([
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="next_page")
            ])
        keyboard.append([
            InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="product_search"),
            InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        await message.answer_photo(
            FSInputFile(distribution_chart),
            caption="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º"
        )
        await message.answer_photo(
            FSInputFile(revenue_chart),
            caption="–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        await message.answer(
            formatted_results,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            disable_web_page_preview=True
        )
        
        await state.set_state(UserStates.viewing_search_results)
        
    except Exception as e:
        logger.error(f"Error processing search query: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
        await state.clear()

@dp.callback_query(lambda c: c.data in ["next_page", "prev_page"])
async def handle_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        results = data.get("search_results", [])
        current_page = data.get("current_page", 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if callback_query.data == "next_page":
            current_page += 1
        else:
            current_page -= 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = current_page * 5
        end_idx = start_idx + 5
        current_results = results[start_idx:end_idx]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_page=current_page)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        nav_buttons = []
        
        if current_page > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="prev_page")
            )
        
        if end_idx < len(results):
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_page")
            )
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        keyboard.append([
            InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="product_search"),
            InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")
        ])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_results = format_serper_results_detailed({"error": None, "results": current_results})
        
        await callback_query.message.edit_text(
            formatted_results,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error handling pagination: {str(e)}", exc_info=True)
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
            show_alert=True
        )

@dp.message(F.photo)
async def handle_payment_screenshot(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        amount = data.get('amount')
        user_id = message.from_user.id
        
        admin_message = (
            f"üîÑ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {user_id})\n"
            f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É:"
        )
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment_{user_id}_{amount}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment_{user_id}_{amount}")
            ]
        ])
        
        await bot.send_photo(
            chat_id=ADMIN_ID,
            photo=message.photo[-1].file_id,
            caption=admin_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=admin_keyboard
        )
        
        await message.answer(
            "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=main_menu_kb()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error handling payment screenshot: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_kb()
        )
        await state.clear()

@dp.message(F.text, UserStates.waiting_for_payment_amount)
async def handle_payment_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 100:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100‚ÇΩ")
            return
        await state.update_data(amount=amount)
        await state.set_state(UserStates.waiting_for_payment_screenshot)
        await message.answer(
            f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}‚ÇΩ\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

def build_area_chart(labels, sales, revenue, profit, title, filename_prefix):
    plt.figure(figsize=(10, 6))
    x = np.arange(len(labels))
    width = 0.25
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
    plt.subplot(3, 1, 1)
    plt.bar(x, sales, width, color='#4e79a7', label='–ü—Ä–æ–¥–∞–∂–∏, —à—Ç.')
    plt.title('–ü—Ä–æ–¥–∞–∂–∏', fontsize=12)
    plt.xticks(x, labels, fontsize=10)
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    for i, val in enumerate(sales):
        plt.annotate(f'{int(val):,}'.replace(',', ' '), (x[i], val), 
                    textcoords="offset points", xytext=(0,5), ha='center', fontsize=9)
    
    plt.subplot(3, 1, 2)
    plt.bar(x, revenue, width, color='#f28e2b', label='–í—ã—Ä—É—á–∫–∞, ‚ÇΩ')
    plt.title('–í—ã—Ä—É—á–∫–∞', fontsize=12)
    plt.xticks(x, labels, fontsize=10)
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    for i, val in enumerate(revenue):
        plt.annotate(f'{int(val):,}'.replace(',', ' '), (x[i], val), 
                    textcoords="offset points", xytext=(0,5), ha='center', fontsize=9)
    
    plt.subplot(3, 1, 3)
    plt.bar(x, profit, width, color='#e15759', label='–ü—Ä–∏–±—ã–ª—å, ‚ÇΩ')
    plt.title('–ü—Ä–∏–±—ã–ª—å', fontsize=12)
    plt.xticks(x, labels, fontsize=10)
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    for i, val in enumerate(profit):
        plt.annotate(f'{int(val):,}'.replace(',', ' '), (x[i], val), 
                    textcoords="offset points", xytext=(0,5), ha='center', fontsize=9)
    
    plt.tight_layout()
    tmpfile = tempfile.NamedTemporaryFile(suffix='.png', prefix=filename_prefix, delete=False)
    plt.savefig(tmpfile.name)
    plt.close()
    return tmpfile.name

def build_trend_analysis_chart(labels, values, title, filename_prefix):
    plt.figure(figsize=(10, 6))
    x = np.arange(len(labels))
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
    plt.plot(x, values, 'o-', color='#4e79a7', linewidth=2, markersize=8)
    
    # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    z = np.polyfit(x, values, 1)
    p = np.poly1d(z)
    plt.plot(x, p(x), 'r--', linewidth=1, label='–¢—Ä–µ–Ω–¥')
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
    plt.fill_between(x, values, alpha=0.2, color='#4e79a7')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.title(title, fontsize=14)
    plt.xticks(x, labels, fontsize=10)
    plt.grid(True, linestyle='--', alpha=0.5)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Ç–æ—á–∫–∞–º–∏
    for i, val in enumerate(values):
        plt.annotate(f'{int(val):,}'.replace(',', ' '), (x[i], val), 
                    textcoords="offset points", xytext=(0,10), ha='center', fontsize=9)
    
    plt.tight_layout()
    tmpfile = tempfile.NamedTemporaryFile(suffix='.png', prefix=filename_prefix, delete=False)
    plt.savefig(tmpfile.name)
    plt.close()
    return tmpfile.name

def build_platform_comparison_chart(platforms, metrics, title, filename_prefix):
    plt.figure(figsize=(12, 6))
    x = np.arange(len(platforms))
    width = 0.35
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫
    plt.bar(x - width/2, metrics['views'], width, label='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', color='#4e79a7')
    plt.bar(x + width/2, metrics['likes'], width, label='–õ–∞–π–∫–∏', color='#f28e2b')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.title(title, fontsize=14)
    plt.xticks(x, platforms, fontsize=10, rotation=45)
    plt.legend(fontsize=10)
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    for i, val in enumerate(metrics['views']):
        plt.annotate(f'{int(val):,}'.replace(',', ' '), (x[i] - width/2, val), 
                    textcoords="offset points", xytext=(0,5), ha='center', fontsize=9)
    for i, val in enumerate(metrics['likes']):
        plt.annotate(f'{int(val):,}'.replace(',', ' '), (x[i] + width/2, val), 
                    textcoords="offset points", xytext=(0,5), ha='center', fontsize=9)
    
    plt.tight_layout()
    tmpfile = tempfile.NamedTemporaryFile(suffix='.png', prefix=filename_prefix, delete=False)
    plt.savefig(tmpfile.name)
    plt.close()
    return tmpfile.name

def analyze_trends(data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"""
    analysis = []
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂
    sales = data.get('sales', [])
    if sales:
        growth_rate = (sales[-1] - sales[0]) / sales[0] * 100 if sales[0] != 0 else 0
        analysis.append(f"üìà –ü—Ä–æ–¥–∞–∂–∏: {'—Ä–æ—Å—Ç' if growth_rate > 0 else '—Å–Ω–∏–∂–µ–Ω–∏–µ'} –Ω–∞ {abs(growth_rate):.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏
    revenue = data.get('revenue', [])
    if revenue:
        avg_revenue = sum(revenue) / len(revenue)
        max_revenue = max(revenue)
        analysis.append(f"üí∞ –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞: {avg_revenue:,.0f}‚ÇΩ (–º–∞–∫—Å: {max_revenue:,.0f}‚ÇΩ)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏
    profit = data.get('profit', [])
    if profit:
        profit_margin = (sum(profit) / sum(revenue)) * 100 if sum(revenue) != 0 else 0
        analysis.append(f"üíé –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {profit_margin:.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    platforms = data.get('platforms', {})
    if platforms:
        best_platform = max(platforms.items(), key=lambda x: sum(x[1].values()))
        analysis.append(f"üèÜ –õ—É—á—à–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {best_platform[0]} (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {sum(best_platform[1]['views']):,}, –ª–∞–π–∫–∏: {sum(best_platform[1]['likes']):,})")
    
    return "\n".join(analysis)

@dp.message(lambda message: message.text and message.text.strip(), UserStates.waiting_for_product)
@dp.message(lambda message: message.text and message.text.strip(), UserStates.waiting_for_product)
async def handle_product_article(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        article = message.text.strip()
        logger.info(f"User {user_id} is waiting for product analysis")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        can_perform = subscription_manager.can_perform_action(user_id, 'product_analysis')
        if not can_perform:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π", reply_markup=main_menu_kb())
            await state.clear()
            return

        await message.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ç–∏–∫—É–ª–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        product_info = await get_wb_product_info(article)
        if not product_info:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–∞.", reply_markup=main_menu_kb())
            await state.clear()
            return
        result = await format_product_analysis(product_info, article)

        # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
        daily_sales = product_info['sales']['today']
        used_estimation = False
        if not daily_sales or daily_sales == 0:
            total_sales = product_info['sales'].get('total', 0)
            feedbacks = product_info.get('feedbacks', 0)
            estimated_total_sales = feedbacks * 30
            total_sales = max(total_sales, estimated_total_sales)
            daily_sales = max(1, round(total_sales / 365)) if total_sales > 0 else 0
            used_estimation = True
        week_sales = daily_sales * 7 if not used_estimation else round(total_sales / 52)
        month_sales = daily_sales * 30 if not used_estimation else round(total_sales / 12)
        price = product_info['price']['current']
        commission = 0.15
        daily_revenue = daily_sales * price
        week_revenue = week_sales * price
        month_revenue = month_sales * price
        daily_profit = int(daily_revenue * (1 - commission))
        week_profit = int(week_revenue * (1 - commission))
        month_profit = int(month_revenue * (1 - commission))
        # –ì—Ä–∞—Ñ–∏–∫–∏
        sales_plot = build_area_chart(['–°—É—Ç–∫–∏', '–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü'], [daily_sales, week_sales, month_sales], [daily_revenue, week_revenue, month_revenue], [daily_profit, week_profit, month_profit], f'–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ {article}', 'sales_')
        revenue_plot = build_area_chart(['–°—É—Ç–∫–∏', '–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü'], [daily_sales, week_sales, month_sales], [daily_revenue, week_revenue, month_revenue], [daily_profit, week_profit, month_profit], f'–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏ {article}', 'revenue_')
        profit_plot = build_area_chart(['–°—É—Ç–∫–∏', '–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü'], [daily_sales, week_sales, month_sales], [daily_revenue, week_revenue, month_revenue], [daily_profit, week_profit, month_profit], f'–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã–ª–∏ {article}', 'profit_')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        await bot.send_photo(message.chat.id, FSInputFile(sales_plot), caption="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂", reply_markup=None)
        await bot.send_photo(message.chat.id, FSInputFile(revenue_plot), caption="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π –≤—ã—Ä—É—á–∫–∏", reply_markup=None)
        await bot.send_photo(message.chat.id, FSInputFile(profit_plot), caption="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏", reply_markup=None)
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        await bot.send_message(message.chat.id, result, parse_mode=ParseMode.MARKDOWN, reply_markup=main_menu_kb())

        # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã/–≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ---
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        try:
            search_query = product_info.get('name') or product_info.get('brand') or article
            search_results = await global_search_serper_detailed(search_query)
            mentions = search_results.get('results', [])
        except Exception as search_err:
            logger.error(f"Global search error: {search_err}")
            mentions = []
        chart_path = None
        if mentions:
            platforms = [m.get('site', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for m in mentions]
            revenues = [m.get('approx_revenue', 0) for m in mentions]
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤—ã—Ä—É—á–∫–µ
            chart_path = build_area_chart(platforms, revenues, revenues, revenues, f'–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º', 'adv_')
            await bot.send_photo(message.chat.id, FSInputFile(chart_path), caption="–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º (—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Ä–µ–∫–ª–∞–º–∞)")
        else:
            await bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Ä–µ–∫–ª–∞–º–µ –∏–ª–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.")

        # --- –î–û–ë–ê–í–õ–Ø–ï–ú Instagram-–ø–æ–∏—Å–∫ –ø–æ —Ö—ç—à—Ç–µ–≥—É, –µ—Å–ª–∏ –Ω–µ—Ç instagram.com ---
        if not any('instagram.com' in m.get('site', '') for m in mentions):
            insta_posts = search_instagram_by_hashtag(article)
            if product_info.get('brand'):
                insta_posts += search_instagram_by_hashtag(product_info['brand'])
            if insta_posts:
                mentions.extend(insta_posts)
                # –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                platforms = [m.get('site', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for m in mentions]
                revenues = [m.get('approx_revenue', 0) for m in mentions]
                chart_path = build_area_chart(platforms, revenues, revenues, revenues, f'–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º', 'adv_')
                await bot.send_photo(message.chat.id, FSInputFile(chart_path), caption="–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º (Instagram)")

        # --- PDF-–æ—Ç—á—ë—Ç –ø–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–æ–∏—Å–∫—É ---
        try:
            pdf_path = generate_global_search_pdf(article, mentions, chart_path)
            await bot.send_document(message.chat.id, FSInputFile(pdf_path), caption="PDF-–æ—Ç—á—ë—Ç –ø–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–æ–∏—Å–∫—É –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É")
        except Exception as pdf_err:
            logger.error(f"PDF error: {pdf_err}")
            await bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ PDF-–æ—Ç—á—ë—Ç–∞: {pdf_err}")
        await state.clear()

        # --- –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤ handle_product_article –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ---
        # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è mentions:
        # if not any('instagram.com' in m.get('site', '') for m in mentions):
        #     hashtag = article  # –∏–ª–∏ product_info['brand']
        #     insta_posts = search_instagram_by_hashtag(hashtag)
        #     mentions.extend(insta_posts)
    except Exception as e:
        logger.error(f"Error in handle_product_article: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—Ä—Ç–∏–∫—É–ª–∞.", reply_markup=main_menu_kb())
        await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def check_expiring_subscriptions():
    logger.info("Starting expiring subscriptions check")
    while True:
        expiring = subscription_manager.get_expiring_subscriptions()
        logger.info(f"Found {len(expiring)} expiring subscriptions")
        
        for sub in expiring:
            days_left = (datetime.fromisoformat(sub['expiry_date']) - datetime.now()).days
            if days_left <= 3:
                logger.info(f"Sending expiry notification to user {sub['user_id']}, {days_left} days left")
                await bot.send_message(
                    sub['user_id'],
                    f"‚ö†Ô∏è *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π*\n\n"
                    f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {sub['type']}\n"
                    "–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")]
                    ])
                )
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞
async def format_product_analysis(product_info, article):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞."""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏
    daily_sales = product_info['sales']['today']
    used_estimation = False
    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç sales_today
    if not daily_sales or daily_sales == 0:
        total_sales = product_info['sales'].get('total', 0)
        sales_per_month = product_info.get('salesPerMonth', 0)
        feedbacks = product_info.get('feedbacks', 0)
        # –û—Ü–µ–Ω–∫–∞ –ø–æ –æ—Ç–∑—ã–≤–∞–º: 1 –æ—Ç–∑—ã–≤ ‚âà 30 –ø—Ä–æ–¥–∞–∂ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
        estimated_total_sales = feedbacks * 30
        # –ï—Å–ª–∏ total_sales —É–∂–µ –µ—Å—Ç—å –∏ –±–æ–ª—å—à–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        total_sales = max(total_sales, estimated_total_sales)
        # –û—Ü–µ–Ω–∫–∞: –∑–∞ –º–µ—Å—è—Ü ‚Äî 1/12, –∑–∞ –Ω–µ–¥–µ–ª—é ‚Äî 1/52, –∑–∞ —Å—É—Ç–∫–∏ ‚Äî 1/365
        estimated_month = round(total_sales / 12)
        estimated_week = round(total_sales / 52)
        daily_sales = max(1, round(total_sales / 365)) if total_sales > 0 else 0
        used_estimation = True
    else:
        estimated_week = daily_sales * 7
        estimated_month = daily_sales * 30
    
    daily_revenue = daily_sales * product_info['price']['current']
    estimated_week_revenue = estimated_week * product_info['price']['current']
    estimated_month_revenue = estimated_month * product_info['price']['current']
    
    # –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø—Ä–∏–±—ã–ª—å (–±–µ—Ä–µ–º 30% –æ—Ç –≤—ã—Ä—É—á–∫–∏)
    profit_margin = 0.3
    daily_profit = daily_revenue * profit_margin
    estimated_week_profit = estimated_week_revenue * profit_margin
    estimated_month_profit = estimated_month_revenue * profit_margin

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating = product_info['rating']
    if rating > 5:
        rating = rating / 10
    
    result = (
        f"üìä *–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ {article}*\n\n"
        f"*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}\n"
        f"üè∑ –ë—Ä–µ–Ω–¥: {product_info['brand']}\n"
        f"üí∞ –¶–µ–Ω–∞: {product_info['price']['current']}‚ÇΩ"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if product_info['price']['discount'] > 0:
        result += f" (-{product_info['price']['discount']}% –æ—Ç {product_info['price']['original']}‚ÇΩ)"
    
    result += (
        f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}/5\n"
        f"üìù –û—Ç–∑—ã–≤–æ–≤: {product_info['feedbacks']}\n"
        f"\n*–ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö:*\n"
        f"üì¶ –í—Å–µ–≥–æ: {product_info['stocks']['total']} —à—Ç.\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
    if product_info['stocks']['by_size']:
        result += "\n*–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º:*\n"
        for size, qty in sorted(product_info['stocks']['by_size'].items()):
            if qty > 0:
                result += f"‚Ä¢ {size}: {qty} —à—Ç.\n"
    
    # –ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞
    if daily_sales == 0:
        result += (
            f"\n*–ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞:*\n"
            f"‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ —Å—É—Ç–∫–∏.\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å—É—Ç–∫–∏: 0‚ÇΩ\n"
            f"üíé –ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏: 0‚ÇΩ\n"
        )
        week_note = "‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞."
        month_note = "‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞."
    else:
        result += (
            f"\n*–ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞:*\n"
            f"üìà –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏: {daily_sales} —à—Ç.\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å—É—Ç–∫–∏: {daily_revenue:,.0f}‚ÇΩ\n"
            f"üíé –ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏: {daily_profit:,.0f}‚ÇΩ\n"
        )
        week_note = ""
        month_note = ""
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é
    result += (
        f"\n*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n"
        f"üìà –ü—Ä–æ–¥–∞–∂–∏: ~{estimated_week} —à—Ç.\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: ~{estimated_week_revenue:,.0f}‚ÇΩ\n"
        f"üíé –ü—Ä–∏–±—ã–ª—å: ~{estimated_week_profit:,.0f}‚ÇΩ\n"
    )
    if week_note:
        result += week_note + "\n"
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü
    result += (
        f"\n*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:*\n"
        f"üìà –ü—Ä–æ–¥–∞–∂–∏: ~{estimated_month} —à—Ç.\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: ~{estimated_month_revenue:,.0f}‚ÇΩ\n"
        f"üíé –ü—Ä–∏–±—ã–ª—å: ~{estimated_month_profit:,.0f}‚ÇΩ\n"
    )
    if month_note:
        result += month_note + "\n"
    
    # –ü–æ—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –æ—Ü–µ–Ω–∫–∞
    if used_estimation:
        result += ("\n_–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –æ—Ü–µ–Ω–æ—á–Ω—ã–µ, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Å—Ä–µ–¥–Ω–µ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ Wildberries. –†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è._\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    if rating < 4:
        recommendations.append("\nüí° *–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è*\n- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∂–∞–ª–æ–±—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.\n- –í–Ω–µ–¥—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∏.\n- –£–ª—É—á—à–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –≤–µ–∂–ª–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ, —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤.")
    if product_info['feedbacks'] < 100:
        recommendations.append("\nüí° *–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤*\n- –ü—Ä–æ—Å–∏—Ç–µ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∏–ª–∏ —Å–∫–∏–¥–∫–∏ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥—ã –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–æ—Ä–º–µ –æ—Ç–∑—ã–≤–∞.\n- –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤—Å–µ –æ—Ç–∑—ã–≤—ã ‚Äî —ç—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.")
    if product_info['stocks']['total'] < 10:
        recommendations.append("\nüí° *–ü–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞*\n- –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–≤–∞—Ä–∞.\n- –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–∫—É–ø–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ —Å–µ–∑–æ–Ω–æ–º –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —Å–ø—Ä–æ—Å–∞.\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö.")
    if product_info['price']['discount'] > 30:
        recommendations.append("\nüí° *–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É*\n- –°—Ä–∞–≤–Ω–∏—Ç–µ —Ü–µ–Ω—ã —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏: –≤–æ–∑–º–æ–∂–Ω–æ, —Å–∫–∏–¥–∫–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ –∏ —Å–Ω–∏–∂–∞–µ—Ç –≤–∞—à—É –ø—Ä–∏–±—ã–ª—å.\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ ‚Äî –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.\n- –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–∫–∏–¥–æ–∫ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏.")
    if daily_sales == 0 and product_info['stocks']['total'] > 0:
        recommendations.append("\nüí° *–ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é*\n- –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö.\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –±—Ä–µ–Ω–¥–∞.\n- –°–æ—Ç—Ä—É–¥–Ω–∏—á–∞–π—Ç–µ —Å –±–ª–æ–≥–µ—Ä–∞–º–∏ –∏ –ª–∏–¥–µ—Ä–∞–º–∏ –º–Ω–µ–Ω–∏–π.\n- –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–∫–ª–∞–º—É.")
    if not recommendations:
        recommendations.append("\n‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–æ—Å—Ç–∞.")
    result += "\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* " + "\n".join(recommendations)
    
    return result

def generate_global_search_pdf(article, search_results, chart_path=None):
    import os
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"PDF: platforms in mentions: {[item.get('site', '') for item in search_results]}")
    pdf = FPDF()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç DejaVuSans –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    font_path = os.path.join(os.path.dirname(__file__), 'DejaVuSans.ttf')
    pdf.add_font('DejaVu', '', font_path, uni=True)
    pdf.add_font('DejaVu', 'B', font_path, uni=True)
    pdf.add_page()
    pdf.set_font('DejaVu', 'B', 18)
    pdf.cell(0, 15, f'–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É {article}', ln=1, align='C')
    pdf.set_font('DejaVu', '', 12)
    pdf.cell(0, 10, f'–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime("%d.%m.%Y %H:%M")}', ln=1, align='C')
    pdf.ln(5)
    if not search_results:
        pdf.set_font('DejaVu', '', 14)
        pdf.set_text_color(200, 0, 0)
        pdf.multi_cell(0, 10, '–°—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –¢–æ–≤–∞—Ä –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.', align='C')
        pdf.set_text_color(0, 0, 0)
    else:
        pdf.set_font('DejaVu', 'B', 13)
        pdf.cell(0, 10, '–¢–∞–±–ª–∏—Ü–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:', ln=1)
        pdf.set_font('DejaVu', '', 11)
        col_widths = [32, 60, 22, 22, 28, 28, 18]
        headers = ['–ü–ª–æ—â–∞–¥–∫–∞', '–°—Å—ã–ª–∫–∞', '–õ–∞–π–∫–∏', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ê—É–¥–∏—Ç–æ—Ä–∏—è', '–í—ã—Ä—É—á–∫–∞', '–†–æ—Å—Ç %']
        for i, h in enumerate(headers):
            pdf.cell(col_widths[i], 8, h, border=1, align='C')
        pdf.ln()
        for item in search_results:
            site = item.get('site', '')[:15]
            link = item.get('link', '')
            likes = item.get('likes', 0)
            views = item.get('views', 0)
            # –î–ª—è Instagram ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —è–≤–Ω–æ –ø–∏—à–µ–º –ø—Ä–∏—á–∏–Ω—É
            if 'instagram.com' in site and (likes == 0 and views == 0):
                likes_str = '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                views_str = '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            else:
                likes_str = str(likes)
                views_str = str(views)
            pdf.cell(col_widths[0], 8, site, border=1)
            # –°—Å—ã–ª–∫–∞ ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤ —Å ...
            short_link = link if len(link) <= 40 else link[:37] + '...'
            pdf.cell(col_widths[1], 8, short_link, border=1)
            pdf.cell(col_widths[2], 8, likes_str, border=1, align='C')
            pdf.cell(col_widths[3], 8, views_str, border=1, align='C')
            pdf.cell(col_widths[4], 8, str(item.get('approx_clients', 0)), border=1, align='C')
            pdf.cell(col_widths[5], 8, str(item.get('approx_revenue', 0)), border=1, align='C')
            pdf.cell(col_widths[6], 8, f"{item.get('growth_percent', 0):.1f}", border=1, align='C')
            pdf.ln()
        pdf.ln(5)
        if chart_path and os.path.exists(chart_path):
            pdf.set_font('DejaVu', 'B', 12)
            pdf.cell(0, 10, '–ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–∞–Ω–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', ln=1)
            pdf.image(chart_path, x=20, w=170)
        # –°–Ω–æ—Å–∫–∞ –¥–ª—è Instagram
        pdf.set_font('DejaVu', '', 9)
        pdf.set_text_color(120, 120, 120)
        pdf.multi_cell(0, 7, '–î–ª—è Instagram —á–∞—Å—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ —É–∫–∞–∑–∞–Ω–æ: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (Instagram –∑–∞—â–∏—â—ë–Ω).', align='L')
        pdf.set_text_color(0, 0, 0)
    tmpfile = tempfile.NamedTemporaryFile(suffix='.pdf', delete=False)
    pdf.output(tmpfile.name)
    return tmpfile.name

def search_instagram_by_hashtag(hashtag, max_posts=5):
    L = instaloader.Instaloader()
    username = "upir.worldwide"
    password = "GGrenki_1901"
    try:
        L.login(username, password)
        posts = instaloader.Hashtag.from_name(L.context, hashtag).get_posts()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Instaloader: {e}")
        return []
    results = []
    for i, post in enumerate(posts):
        if i >= max_posts:
            break
        results.append({
            'site': 'instagram.com',
            'link': f'https://www.instagram.com/p/{post.shortcode}/',
            'likes': post.likes,
            'views': post.video_view_count if post.is_video else 0,
            'approx_clients': int(post.likes * 0.1 + (post.video_view_count or 0) * 0.05),
            'approx_revenue': int((post.likes * 0.1 + (post.video_view_count or 0) * 0.05) * 500),
            'growth_percent': 0,
        })
    return results

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ main
async def main():
    logger.info("Starting bot...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(check_expiring_subscriptions())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main()) 